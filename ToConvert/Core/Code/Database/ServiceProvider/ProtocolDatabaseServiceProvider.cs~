namespace Mayfair.Core.Code.Database.ServiceProvider
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Mayfair.Core.Code.Database.Interfaces;
    using Mayfair.Core.Code.Database.Messages;
    using Mayfair.Core.Code.Messaging.Communicator;
    using Mayfair.Core.Code.Messaging.Messages;
    using Mayfair.Core.Code.Protocol;
    using Mayfair.Core.Code.Resources.Enums;
    using Mayfair.Core.Code.Resources.Loader;
    using Mayfair.Core.Code.Resources.Messages;
    using Mayfair.Core.Code.Utils;
    using Mayfair.Core.Code.Utils.Debug;
    using UnityEditor;

    public class ProtocolDatabaseServiceProvider : DatabaseServiceProvider
    {
        #region Static and Constants
        private const int REMAINING_ASSETS_TO_LOAD = 0;
        #endregion

        #region Fields
        private ResourcesLoadingStatus resourcesLoadingStatus = ResourcesLoadingStatus.NotStarted;

        private readonly List<ScriptableObjectResourceReference<ProtocolDatabaseContainer>> pendingUnpack = new List<ScriptableObjectResourceReference<ProtocolDatabaseContainer>>();

        private readonly List<ScriptableObjectResourceReference<ProtocolDatabaseContainer>> assetsToLoad = new List<ScriptableObjectResourceReference<ProtocolDatabaseContainer>>();
        #endregion

        #region Properties
        public override bool IsProviderValid
        {
            get { return true; }
        }

        public override int Priority
        {
            get { return 0; }
        }
        #endregion

        #region Class Methods
        public override RequestCallbackOnChange GetResourceChangeRequest(ILightMessageCommunicator communicator)
        {
            DatabaseCallbackOnChange<ProtocolDatabaseContainer> request = Message.Create<DatabaseCallbackOnChange<ProtocolDatabaseContainer>>();
            request.Init(ResourceKeywords);
            return request;
        }

        public override void OnResourceChanged(DatabaseService service, ResourcesHaveChangedResponse message)
        {
            if (message is ScriptableResourcesHaveChanged<ProtocolDatabaseContainer> resourcesHaveChangedResponse)
            {
                OnProtocolDatabaseUpdate(service, resourcesHaveChangedResponse);
            }
        }

        public override void RefreshPendingResources(DatabaseService service)
        {
            if (resourcesLoadingStatus != ResourcesLoadingStatus.Loading)
            {
                return;
            }

            List<ScriptableObjectResourceReference<ProtocolDatabaseContainer>> currentUnpack = new List<ScriptableObjectResourceReference<ProtocolDatabaseContainer>>(pendingUnpack);
            pendingUnpack.Clear();
            foreach (ScriptableObjectResourceReference<ProtocolDatabaseContainer> container in currentUnpack)
            {
                bool resourcesUnpacked = false;
                if (container.Resource != null)
                {
                    if (UnpackResource(container, service))
                    {
                        resourcesUnpacked = true;

                        assetsToLoad.Remove(container);
                    }
                }

                if (!resourcesUnpacked)
                {
#if NVIZZIO_DEV
                    StringBuilder builder = new StringBuilder();
                    builder.AppendLine($"Resource '{container.Loader.Location}' couldn't be unpacked.");
                    if (container.Resource == null)
                    {
                        builder.AppendLine("Resource might be corrupt or address might be invalid, verify your datas");
                    }
                    else
                    {
                        builder.AppendLine($"Resource is valid but unpacker might not be: {container.Resource.name} from source: {container.Resource.Source} with url: {container.Resource.ClassName}");
                    }

                    builder.AppendLine("Loading process Will continue but the DB data may be wrong.");
                    DebugTools.LogError(builder.ToString());
#endif

                    assetsToLoad.Remove(container);
                }
            }

            if (assetsToLoad.Count == REMAINING_ASSETS_TO_LOAD)
            {
                resourcesLoadingStatus = ResourcesLoadingStatus.Loaded;
                service.SetResourcesLoadingStatus(resourcesLoadingStatus);
            }
        }

        private bool UnpackResource(ScriptableObjectResourceReference<ProtocolDatabaseContainer> container, DatabaseService service)
        {
            IDatabaseTable unpacked = DatabaseHelper.TryUnpack(container.Resource);
            if (unpacked != null)
            {
                List<IDatabaseEntry> unpackedList = new List<IDatabaseEntry>();
                unpacked.GetEntries(unpackedList);

                for (int l = 0; l < unpackedList.Count; l++)
                {
                    IDatabaseEntry entry = unpackedList[l];
                    service.AddEntry(entry);
                }

                return true;
            }

            return false;
        }

        protected void OnProtocolDatabaseUpdate(DatabaseService service, ScriptableResourcesHaveChanged<ProtocolDatabaseContainer> message)
        {
            DebugTools.Log(this, message);

            if (resourcesLoadingStatus == ResourcesLoadingStatus.Loading)
            {
                throw new Exception("Provider is currently loading resources but you are trying to start another loading process before the end of the current one");
            }

            if (message.References.Count > 0)
            {
                resourcesLoadingStatus = ResourcesLoadingStatus.Loading;
                service.SetResourcesLoadingStatus(resourcesLoadingStatus);
            }

            foreach (ScriptableObjectResourceReference<ProtocolDatabaseContainer> reference in message.References)
            {
                assetsToLoad.Add(reference);
                reference.LoadCompleted = LoadAssetCompleted;
                reference.LoadAsync();
            }
        }

        private void LoadAssetCompleted(IAbstractResourceReference container)
        {
            ScriptableObjectResourceReference<ProtocolDatabaseContainer> realContainer = container as ScriptableObjectResourceReference<ProtocolDatabaseContainer>;
            if (realContainer.Loader.Status != AsyncStatus.Loaded)
            {
                return;
            }

            pendingUnpack.Add(realContainer);
        }
        #endregion
    }
}
